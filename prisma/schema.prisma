// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  // provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String           @id @default(uuid())
  name            String
  userId          String
  billboard       Billboard[]      @relation("StoreToBillboard")
  categories      Category[]       @relation("StoreToCategory")
  products        Product[]        @relation("StoreToProduct")
  problems        Problem[]        @relation("StoreToProblem")
  indications     Indication[]     @relation("StoreToIndication")
  recommendations Recommendation[] @relation("StoreToRecommendation")
  rules           Rule[]           @relation("StoreToRule")
  vehicleBrands   VehicleBrand[]   @relation("StoreToVehicleBrand")
  vehicleTypes    VehicleType[]    @relation("StoreToVehicleType")
  productBrands   ProductBrand[]   @relation("StoreToProductBrand")
  orders          Order[]          @relation("StoreToOrder")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  product     Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model VehicleType {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToVehicleType", fields: [storeId], references: [id])
  name      String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model VehicleBrand {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToVehicleBrand", fields: [storeId], references: [id])
  name      String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model ProductBrand {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToProductBrand", fields: [storeId], references: [id])
  name      String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id              String           @id @default(uuid())
  storeId         String
  store           Store            @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId      String
  category        Category         @relation("CategoryToProduct", fields: [categoryId], references: [id])
  vehicleBrandId  String // Foreign Key to VehicleBrand
  vehicleBrand    VehicleBrand     @relation(fields: [vehicleBrandId], references: [id])
  vehicleTypeId   String // Foreign Key to VehicleType
  vehicleType     VehicleType      @relation(fields: [vehicleTypeId], references: [id])
  productBrandId  String // Foreign Key to ProdyctBrand
  productBrand    ProductBrand     @relation(fields: [productBrandId], references: [id])
  name            String
  price           Int
  stock           Int
  weight          Int
  description     String
  isFeatured      Boolean          @default(false)
  isArchived      Boolean          @default(false)
  images          Image[]
  orderItems      OrderItem[]
  recommendations Recommendation[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([vehicleTypeId])
  @@index([vehicleBrandId])
  @@index([productBrandId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  statusOrder String      @default("")
  buyerName   String      @default("")
  phone       String      @default("")
  address     String      @default("")
  Email       String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@index([orderId])
  @@index([productId])
}

// Model sistem pakar

model Problem {
  id              String           @id @default(uuid())
  kode            String
  name            String
  storeId         String
  store           Store            @relation("StoreToProblem", fields: [storeId], references: [id])    
  recommendations Recommendation[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([storeId])
}

model Indication {
  id              String           @id @default(uuid())
  kode            String
  name            String
  storeId         String
  store           Store            @relation("StoreToIndication", fields: [storeId], references: [id])
  recommendations Recommendation[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([storeId])
}

model Rule {
  id              String           @id @default(uuid())
  storeId         String
  store           Store            @relation("StoreToRule", fields: [storeId], references: [id])
  kondisi         String
  hasil           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([storeId])
}

model Recommendation {
  id           String     @id @default(uuid())
  storeId      String
  store        Store      @relation("StoreToRecommendation", fields: [storeId], references: [id])
  indicationId String
  indication   Indication @relation(fields: [indicationId], references: [id])
  problemId    String
  problem      Problem    @relation(fields: [problemId], references: [id])
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  confidence   Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([storeId])
  @@index([indicationId])
  @@index([problemId])
  @@index([productId])
}
